#+PROPERTY: header-args :tangle yes :comments yes :results silent
* Some initial settings

Make sure that we are using a coding system that can handle international characters
#+BEGIN_SRC emacs-lisp
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
#+END_SRC

* UI Tweaks

** Menu-bar
Turn off the menu bar. It can still be accessed with ~F10~.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-message t)
#+END_SRC

** Define some functions that allow font-size adjustment in frames
#+BEGIN_SRC emacs-lisp
(setq jm/font-name "Hack")
(defcustom jm/font-size 15 "My default font size")

(defun set-frame-font-size (&optional font-size)
  (let ((font-size
	   (or font-size
	       (car (get 'jm/font-size 'standard-value)))))
    (customize-set-variable 'jm/font-size font-size)
    (set-frame-font
     (format "%s %d" jm/font-name font-size) nil t)))

(defun increase-frame-font ()
  "Increase frame font by one."
  (interactive)
  (set-frame-font-size (+ jm/font-size 1)))

(defun decrease-frame-font ()
  "Decrease frame font by one."
  (interactive)
  (set-frame-font-size (- jm/font-size 1)))

(defun reset-frame-font ()
  "Reset frame font to its default value."
  (interactive)
  (set-frame-font-size))

(add-hook 'after-init-hook 'reset-frame-font)
#+END_SRC

* Saving and open at last location
#+BEGIN_SRC emacs-lisp
(desktop-save-mode t)
(save-place-mode t)
(add-hook 'focus-out-hook (lambda () (interactive) (save-some-buffers t)))
;; save when frame is closed
(add-hook 'delete-frame-functions (lambda () (interactive) (save-some-buffers t)))
(global-auto-revert-mode t)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+END_SRC

* Install ~use-package~ and then other packages
** Set up package archives and install use-package

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
       '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

(package-initialize)
(unless (package-installed-p 'use-package )
  (package-refresh-contents)
  (package-install 'use-package ))

(require 'use-package)
#+END_SRC

** Configure use-package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC


** Intsall magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status)
  :bind ("C-x g" . magit-status))
#+END_SRC



** TODO Figlet / other demo stuff
** TODO Customize
* Use a customization file

#+BEGIN_SRC emacs-lisp
(setq custom-file  "~/.emacs.d/custom.el")
(if (file-readable-p custom-file)
    (load custom-file))
#+END_SRC

** Todo Make source code blocks default to ~emacs-lisp~


** Local Variables (hidden - view in raw)
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda() (org-babel-tangle)) nil t)
# End:
